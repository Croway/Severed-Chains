import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform
import org.apache.tools.ant.filters.ReplaceTokens

plugins {
  id 'java'
  id 'org.openjfx.javafxplugin' version '0.0.14'
  id 'java-library'
  id 'maven-publish'
}

project.ext.hash = System.getenv("GITHUB_SHA");

if(project.ext.hash == null) {
  project.ext.hash = 'snapshot'
}

group 'legend'
version project.ext.hash

sourceCompatibility = targetCompatibility = 1.17
compileJava.options.encoding = 'UTF-8'

project.ext.lwjglVersion = "3.3.2"
project.ext.jomlVersion = "1.10.5"

if(DefaultNativePlatform.getCurrentOperatingSystem().isWindows()) {
  project.ext.lwjglNatives = "natives-windows"
}

if(DefaultNativePlatform.getCurrentOperatingSystem().isLinux()) {
  project.ext.lwjglNatives = "natives-linux"
}

if(DefaultNativePlatform.getCurrentOperatingSystem().isMacOsX()) {
  project.ext.lwjglNatives = "natives-macos"
}

if(hasProperty("os")) {
  switch(os) {
    case "windows":
      project.ext.lwjglNatives = "natives-windows"
      break;
    case "linux":
      project.ext.lwjglNatives = "natives-linux"
      break;
    case "macos":
      project.ext.lwjglNatives = "natives-macos"
      break;
  }
}

repositories {
  mavenCentral()
  mavenLocal()
}

dependencies {
  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.14.1'
  implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.17.1'
  implementation group: 'org.fusesource.jansi', name: 'jansi', version: '2.3.2'

  api platform("org.lwjgl:lwjgl-bom:$lwjglVersion")

  api "org.lwjgl:lwjgl"
  api "org.lwjgl:lwjgl-glfw"
  api "org.lwjgl:lwjgl-nuklear"
  api "org.lwjgl:lwjgl-opengl"
  api "org.lwjgl:lwjgl-stb"
  runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives"
  runtimeOnly "org.lwjgl:lwjgl-glfw::$lwjglNatives"
  runtimeOnly "org.lwjgl:lwjgl-nuklear::$lwjglNatives"
  runtimeOnly "org.lwjgl:lwjgl-opengl::$lwjglNatives"
  runtimeOnly "org.lwjgl:lwjgl-stb::$lwjglNatives"
  api "org.joml:joml:${jomlVersion}"

  api group: 'com.github.slugify', name: 'slugify', version: '3.0.4'

  api group: 'it.unimi.dsi', name: 'fastutil', version: '8.5.12'

  implementation group: 'org.reflections', name: 'reflections', version: '0.10.2'
  // To quiet no logger found for reflections
  implementation group: 'org.slf4j', name: 'slf4j-nop', version: '2.0.7'

  implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'

  implementation group: 'net.java.dev.jna', name: 'jna', version: '5.13.0'

  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.3'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.3'
}

javafx {
  version = "18.0.2"
  modules = ['javafx.controls', 'javafx.fxml']

  if(hasProperty("os")) {
    platform = os;
  }
}

jar {
  manifest {
    attributes(
      'Main-Class': 'legend.game.Main'
    )
  }
}

task clearOutput(type: Delete) {
  delete "${buildDir}/libs/libs"
  delete "${buildDir}/libs/**"
}

task copyLibs(type: Copy) {
  from configurations.compileClasspath + configurations.runtimeClasspath
  into "${buildDir}/libs/libs"
}

task copySupportFiles(type: Copy) {
  into "${buildDir}/libs"

  into("gfx") {
    from 'gfx'
  }

  into(".") {
    from('launch.bat') {
      filter(ReplaceTokens, tokens: [version: project.ext.hash])
    }
    from('launch') {
      filter(ReplaceTokens, tokens: [version: project.ext.hash])
    }
    from 'log4j2.xml'
    from 'gamecontrollerdb.txt'
    from 'README.md'
    from 'LICENSE'
  }
}

jar.dependsOn(clearOutput, copyLibs, copySupportFiles)

publishing {
  publications {
    mavenJava(MavenPublication) {
      artifactId = 'lod'
      from components.java
      pom {
        name = 'LoD Engine'
      }
    }
  }
}

test {
  useJUnitPlatform()
}

sourceSets {
  main {
    java {
      srcDirs = ["src/main/java"]
      exclude ".gradle", "build", "files"
    }
  }
}
